package com.crts.insurance.main.Service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PathVariable;

import com.crts.insurance.main.dto.CountryStatedto;
import com.crts.insurance.main.model.Address;
import com.crts.insurance.main.model.Branch;
import com.crts.insurance.main.model.BranchType;
import com.crts.insurance.main.model.City;
import com.crts.insurance.main.model.Country;
import com.crts.insurance.main.model.Department;
import com.crts.insurance.main.model.InsuranceCompany;
import com.crts.insurance.main.model.Product;
import com.crts.insurance.main.model.Staff;
import com.crts.insurance.main.model.State;
import com.crts.insurance.main.repository.MSRepository;
import com.crts.insurance.main.repository.MSRepositoryAddress;
import com.crts.insurance.main.repository.MSRepositoryBranch;
import com.crts.insurance.main.repository.MSRepositoryBranchType;
import com.crts.insurance.main.repository.MSRepositoryCity;
import com.crts.insurance.main.repository.MSRepositoryDepartment;
import com.crts.insurance.main.repository.MSRepositoryInsurance;
import com.crts.insurance.main.repository.MSRepositoryProduct;
import com.crts.insurance.main.repository.MSRepositoryStaff;
import com.crts.insurance.main.repository.MSRepositoryState;

@Service
public class ServiceImplementation implements ServiceI {
	
	@Autowired
	MSRepositoryProduct repoproduct;
	@Autowired
	MSRepositoryBranchType repobranchtype;
	
	@Autowired
	MSRepositoryBranch  repobranch;
	@Autowired
	MSRepositoryStaff repostaff;
	
	@Autowired
	MSRepository repocountry;
	
	@Autowired
	MSRepositoryDepartment repodepartment;
	
	
	@Autowired
	MSRepositoryInsurance repoinsurance;
	
	@Autowired
	MSRepositoryState repostate;

	
	@Autowired
	MSRepositoryCity repocity;
	
	@Autowired
	MSRepositoryAddress repoAddress;

	@Override
	public void save(Country c) {
		repocountry.save(c);
		
	}

	@Override
	public void savestate(State s) {
		repostate.save(s);
		
	}


	@Override
	public void savecity(City city) {
		repocity.save(city);
		
	}

	@Override
	public void saveaddress(Address address) {
		repoAddress.save(address);		
	}


	@Override
	public Country getcountry(int  countryId) {
		Country temp =  repocountry.findById(countryId).get();
	
		
			
			System.out.println(temp.getCountryId() + " "+temp.getCountryName() + " "+ temp.getCountryCode() + " "+temp.getCountryName());
			
		
	
		return temp;
	}

	@Override
	public List<Country> getcountries() {
		//List<Country>  c = (List<Country>) repocountry.findAll();
		
		List<Country>  c =(List<Country>) repocountry.findByall();
		System.out.println("List is");
		for(Country temp :c)
		{
			
			System.out.println(temp.getCountryId() + " "+temp.getCountryName() + " "+ temp.getCountryCode() + " "+temp.getCountryName());
			
		
		}
		return c;
	}

	@Override
	public State getstate(int stateId) {
		
		State s1 = repostate.findAllByStateId(stateId);
		return s1;	
	}

	@Override
	public City getcity(int cityId) {
		
		
		City c = repocity.findAllByCityId(cityId);
		
		return c;
	}

	@Override
	public Address getAddress(int addressId) {
		Address a = repoAddress.findAllByAddressId(addressId);
		return a;
	}

	/*
	 * @Override public List<CountryStatedto> querydata(int stateId) {
	 * 
	 * 
	 * List<CountryStatedto> l = repostate.findStateByState return l; }
	 * 
	 * 
	 * 
	 */

	@Override
	public void saveinsurance(InsuranceCompany insurance) {
		
		repoinsurance.save(insurance);		
	}

	@Override
	public void savedepartment(Department dept) {
		repodepartment.save(dept);
		
	}

	@Override
	public Department getdepartment(int department) {
		Department d =repodepartment.findAllBydeptId(department);
		return d;
	}
	
	@Override
	public InsuranceCompany getcompanydetails(String companyId) {
		InsuranceCompany i =  repoinsurance.findById(companyId).get();
		return i;
	}

	@Override
	public void savestaff(Staff staff) {
		Staff s= repostaff.save(staff);		
	}

	@Override
	public Staff getstaff(int staffid) {
		Staff s = repostaff.findById(staffid).get();
		return s;
	}

	@Override
	public void savebrachtype(BranchType branchtype) {
		
		repobranchtype.save(branchtype);
		
	}

	@Override
	public void savebrachtype(Branch branch) {
	 repobranch.save(branch);
		
	}

	@Override
	public void saveProduct(Product product) {
		repoproduct.save(product);
	}

	@Override
	public Product getproduct(int productID) {
		
		
		Product p = repoproduct.findById(productID).get();
		return p;
	}

	@Override
	public List<Product> getProductList() {
		List<Product> l = (List<Product>) repoproduct.findAll();
		
				return l;
	}

	@Override
	public List<Department> getdepartments() {
		List<Department> d = (List<Department>) repodepartment.findAll();
		return d;
	}

	@Override
	public List<Branch> getbranches() {
		
		
		List<Branch> branch = (List<Branch>) repobranch.findAll();
		return branch;
	}

	@Override
	public Branch getbranch(int branchId) {
		Branch branch = repobranch.findById(branchId).get();
		return branch;
	}

	@Override
	public List<Staff> getstaffs() {
		List<Staff> stafflist = (List<Staff>) repostaff.findAll();
		return stafflist;
	}

}
	

